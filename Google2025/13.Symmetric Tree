# Definition for a binary tree node.
class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

        
        
class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        # Helper function to check if two subtrees are mirrors
        def isMirror(left, right):
            if left is None and right is None:
                return True
            if left is None or right is None:
                return False
            return (left.val == right.val) and \
                   isMirror(left.left, right.right) and \
                   isMirror(left.right, right.left)
        
        # The tree is symmetric if the left and right subtrees are mirrors
        return isMirror(root.left, root.right) if root else True
        
root=TreeNode(1)
root.left=TreeNode(2)
root.right=TreeNode(2)
root.left.left=TreeNode(4)
root.left.right=TreeNode(5)
root.right.left=TreeNode(5)
root.right.right=TreeNode(4)

obj=Solution()
print(obj.isSymmetric(root))
